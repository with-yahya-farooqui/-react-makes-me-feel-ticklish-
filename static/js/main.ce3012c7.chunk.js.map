{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","searchTerm","setSearchTerm","ob","color","background","fontSize","textAlign","paddingLeft","width","ob2","ob3","borderStyle","borderColor","borderRadius","borderWidth","marginBottom","paddingRight","ob4","className","type","placeholder","onChange","event","target","value","data","filter","val","id","toString","toLowerCase","includes","email","username","name","phone","website","company","catchPhrase","bs","address","city","geo","lat","lng","street","suite","zipcode","map","key","style","Math","abs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce3012c7.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport data from \"./data.json\";\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const ob = {\n    color: \"darkcyan\",\n    background: \"#ffffff\",\n    fontSize: 18,\n    textAlign: \"left\",\n    paddingLeft: 0,\n    width: 600,\n  };\n  const ob2 = {\n    color: \"darkgreen\",\n    background: \"#ffffff\",\n    fontSize: 15,\n    textAlign: \"left\",\n    paddingLeft: 15,\n  };\n  const ob3 = {\n    background: \"#ffffff\",\n    borderStyle: \"double\",\n    borderColor: \"blue\",\n    borderRadius: 10,\n    borderWidth: 4,\n    marginBottom: 20,\n    paddingLeft: 30,\n    paddingRight: 30,\n  };\n  const ob4 = {\n    width: 400,\n    textAlign: \"left\",\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <span>\n            <input\n              type=\"text\"\n              placeholder=\"Search\"\n              onChange={(event) => {\n                setSearchTerm(event.target.value);\n              }}\n            ></input>\n          </span>\n        </p>\n        {data\n          .filter((val) => \n          {\n            if (searchTerm === \"\") return val;\n            else if (\n              val.id.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||\n              val.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              val.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              val.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              val.phone.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              val.website.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.company.catchPhrase.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.company.bs.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.company.name.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.address.city.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.address.geo.lat.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.address.geo.lng.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.address.street.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.address.suite.toLowerCase().includes(searchTerm.toLowerCase())||\n              val.address.zipcode.toLowerCase().includes(searchTerm.toLowerCase())\n              )\n              return val;\n          })\n          .map((val, key) => (\n            <div style={ob3}>\n              <p>\n                <details>\n                  <summary style={ob4}>\n                    {val.id}. {val.name}\n                  </summary>\n                  <br></br>\n                  Username: {val.username}\n                  <br></br>\n                  E-mail: {val.email}\n                  <br></br>\n                  Phone: {val.phone}\n                  <br></br>\n                  Website: {val.website}\n                  <br></br>\n                  <details>\n                    <summary style={ob}>Company:</summary>\n                    <div style={ob2}>\n                      Name: {val.company.name}\n                      <br></br>\n                      Catch Phrase: {val.company.catchPhrase}\n                      <br></br>\n                      Brand Strategy: {val.company.bs}\n                      <br></br>\n                    </div>\n                  </details>\n                  <details>\n                    <summary style={ob}>Address:</summary>\n                    <div style={ob2}>\n                      Suite: {val.address.suite}\n                      <br></br>\n                      Street: {val.address.street}\n                      <br></br>\n                      Zipcode: {val.address.zipcode}\n                      <br></br>\n                      Coordinates: ({Math.abs(val.address.geo.lat)}{\" \"}\n                      {val.address.geo.lat > 0 ? \"N\" : \"S\"},\n                      {Math.abs(val.address.geo.lng)}{\" \"}\n                      {val.address.geo.lng > 0 ? \"E\" : \"W\"})\n                    </div>\n                  </details>\n                </details>\n              </p>\n            </div>\n          ))}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}